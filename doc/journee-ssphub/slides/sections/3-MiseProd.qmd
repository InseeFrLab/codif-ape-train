
## Organisation prévue

- Intégration dans [**Sirene 4**]{.orange} pour coder le guichet unique.
- Module de codification : API construite sur `JFastText`.
- Définition du contenu des [**logs**]{.orange} pour contrôle futur.
- [**Double rôle**]{.orange} du SSP Lab à moyen terme :
  - [**Livraison**]{.blue2} des modèles entraînés.
  - [**Contrôle**]{.blue2} qualité.


:::{.callout-important}
## À clarifier

1) Identification des liasses non-codables.
2) Utilisation du module comme aide à la reprise manuelle.
:::

## Organisation à terme ?

![](img/orga_ape.png)

## Retour d'expérience

- [**API Java**]{.orange} vs. expérimentation Python : duplication de code.
- Utilisation de [**FastText**]{.orange} : maintenance, reproductibilité, sécurité.
- Infrastructure de production [**rigide**]{.orange}.
- [**Méconnaissance des problèmes métier**]{.orange} côté SSP Lab pour la maintenance.
- [**Contrôle de version**]{.orange} et [**transmission**]{.orange} des modèles.
- [**Confiance**]{.orange} et compréhension du classifier côté métier.
- Logs [**difficilement accessibles**]{.orange} et au format variable.
- Pas d'accès aux [**bases Sirene**]{.orange} (réentraînement).

## Organisation visée

- [**Observabilité, maintenance**]{.orange} du modèle côté Sirene (appui technique du SSP Lab)
- Développement d'une [**API Python**]{.orange} et utilisation du plein potentiel de [**MLflow**]{.orange}
- Cluster Kubernetes de production
- S'affranchir de [**FastText**]{.orange}
