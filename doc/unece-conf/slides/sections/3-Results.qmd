

## A good overall performance


```{r}
#| label: fig-acc-lvl
#| fig-cap: Accuracy for various level of the NACE nomenclature.
#| fig-width: 13
#| fig-height: 5
#| fis-pos: center

Accuracy_lvl <- Accuracy_lvl %>%
    mutate(Level = factor(Level, levels = paste("Level", paste(seq(5,1,-1))))
    )

plot_Accuracy_lvl <- function(data){
  plot<- ggplot(data , aes(x=Level, y=Accuracy, fill=Type))+
    geom_bar(stat = "identity", position = position_dodge())+
    geom_text(aes(label=round(Accuracy,2)), position=position_dodge(width=0.9), vjust=-0.25, size = 6)+
    scale_fill_manual(values=c(Palette_col))+
    annotate("rect", xmin=c(0.5), xmax=c(1.5), ymin=c(-0.01) , ymax=c(1), color="#EE0220", fill=NA, size=1.5)+
    guides(fill=guide_legend(nrow=1, byrow=TRUE))+
    expand_limits(y = 1.)+
    theme_custom()+
    theme(
      text = element_text(size = 16),
      plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
      legend.text = element_text(size = 18),
      axis.text.y = element_text(size = 18),
      axis.text.x = element_text(size = 18),
    )
  return(plot)
}

plot_Accuracy_lvl(Accuracy_lvl)

```


- Nearly [**80%**]{.orange} of labels from the one-stop shop are correctly coded.
- Most prediction errors are [**close**]{.orange} in the nomenclature.

## Streamlining the manual coding process


```{r}
#| label: fig-acc-top-k
#| fig-cap: Top-$k$ accuracy per sample.
#| fig-width: 13
#| fig-height: 5
#| fis-pos: center

plot_TOPK_Accuracy <- function(data){
  plot<- ggplot(data , aes(x=Type, y=Accuracy, fill=Topk))+
    geom_bar(stat = "identity", position = position_dodge())+
    geom_text(aes(label=round(Accuracy,2)), position=position_dodge(width=0.9), vjust=-0.25, size = 6)+
    scale_fill_manual(values=c(Palette_col))+
    expand_limits(y = 1.)+
    guides(fill=guide_legend(nrow=1, byrow=TRUE))+
    theme_custom()+
    theme(
      text = element_text(size = 16),
      plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
      legend.text = element_text(size = 18),
      axis.text.y = element_text(size = 18),
      axis.text.x = element_text(size = 18),
    )
  return(plot)
}

plot_TOPK_Accuracy(TOPK_Accuracy)

```

- Knowledge of probabilities for each class.
- The correct classification is among the top 5 most probable predictions in [**94%**]{.orange} of cases.



## Building a confidence index {.scrollable}


```{r}
#| label: fig-ic-distrib
#| fig-cap: Distribution of the confidence index based on prediction results.
#| fig-width: 13
#| fig-height: 5
#| fis-pos: center

plot_IC_distrib <- function(data, thresholds, ypos){
  plot <- ggplot(data)+
    geom_histogram(aes(x=Score, fill=Results, y=..density..),binwidth=.01, alpha=.5, position="identity") +
    scale_fill_manual(values=c(Palette_col),labels=c("Bad predictions", "Good predictions"))+
    geom_vline(xintercept = thresholds$x, color = rgb(83, 83, 83, maxColorValue = 255))+
    theme_custom()+
    theme(
      plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
      legend.text = element_text(size = 24),
      axis.text.y = element_text(size = 24),
      axis.text.x = element_text(size = 24),
    )+
    annotate("text", x = thresholds$x+0.03, y = ypos, label = c("5%", "10%", "15%", "20%", "25%"), size = 7)
  
  return(plot)
  
}

plot_IC_distrib(IC_distrib, IC_thresholds, 51)


```

- [**Objective**]{.orange}: [**discriminate**]{.blue2} between *bad* and *good* predictions.
- [**Selected Confidence Index**]{.orange}: difference between the two highest probabilities.


## Efficiency of the manual coding process


```{r}
#| label: fig-reprise
#| fig-cap: Accuracy for various shares of manual coding.
#| fig-width: 13
#| fig-height: 5
#| fis-pos: center

Accuracy_reprise <- Accuracy_reprise %>%
      mutate(
           Rate = factor(Rate, levels = paste0(paste(seq(0,25,5)), "%"))
      )
plot_Accuracy_reprise <- function(data){
  plot<- ggplot(data , aes(x=Type, y=Accuracy, fill=Rate))+
    geom_bar(stat = "identity", position = position_dodge())+
    geom_text(aes(label=round(Accuracy,2)), position=position_dodge(width=0.9), vjust=-0.25, size= 5)+
    scale_fill_manual(values=c(Palette_col))+
    guides(fill=guide_legend(nrow=1, byrow=TRUE))+
    theme_custom()+
    theme(
      text = element_text(size = 16),
      plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
      legend.text = element_text(size = 18),
      axis.text.y = element_text(size = 18),
      axis.text.x = element_text(size = 18),
    )
  return(plot)
}


plot_Accuracy_reprise(Accuracy_reprise)


```

- Optimisation of manual coding process ➨ [**Performance improvement**]{.orange}.


<!-- 

ANNEXE
## Une performance hétérogène en fonction des classes

```{r  fig.width=13,fig.height=7, fig.align="center"}
# F1_distrib_by_cat <- F1_distrib_by_cat %>%
#      mutate(
#           Group = factor(Group, levels = c("Catégories représentant 50% des données",
#                                            "Catégories représentant 25% des données",
#                                            "Catégories représentant 20% des données",
#                                            "Catégories représentant 5% des données"
#                                            
#           ))
#           )

#plot_F1_distrib_by_cat <- function(data){
#  ggplot(data) + 
#    ggtitle("Distribution du F1-score en fonction de la fréquence des classes")+
#    geom_histogram(aes(x=value, fill=Group),binwidth=.05, position="identity") +
#    facet_wrap(. ~ Group,ncol = 1, strip.position="left") +
#    theme_custom()+
#    xlim(c(0,1))+
#    scale_fill_manual(values = Palette_col)+
#    theme(strip.placement = "outside",
#          strip.text.y = element_blank(),
#          text = element_text(size = 16),
#          plot.title=element_text(size=26, margin=margin(b=0.7, unit='cm')),
#          legend.text = element_text(size = 22),
#          axis.text.y = element_text(size = 18),
#          axis.text.x = element_text(size = 18),
#          panel.spacing = unit(1, "lines")
#    )+
#    guides(fill=guide_legend(nrow=2, byrow=TRUE))
  
#}



#plot_F1_distrib_by_cat(F1_distrib_by_cat)


```

- [**Performance mitigée**]{.orange} sur plusieurs classes peu fréquentes. -->
