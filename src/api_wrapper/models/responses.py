from typing import Any, Dict, Mapping

from pydantic import BaseModel, RootModel, model_validator


class Prediction(BaseModel):
    code: str
    probabilite: float
    libelle: str


class PredictionResponse(RootModel[Dict[str, Any]]):
    """
    Contract for the normalized prediction responses generated by the model artifact.

    Expected flat structure after normalization:
      {
        "1": Prediction,
        "2": Prediction,
        ...,
        "IC": float,           # required confidence score
        "MLversion": str  # required run_id as model version
      }

    Notes:
    - The output reflects what the model artifact produces, but the API applies
      `model_dump()` in `predict()` before returning to ensure schema consistency.
    - Strong validation is performed during training; inference focuses on lightweight
      structural checks for performance.
    - Any changes to the output schema (e.g., new fields, renaming) must be documented
      here to maintain API contract clarity.
    """
    pass
